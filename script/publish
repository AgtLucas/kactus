#!/usr/bin/env node

'use strict'

const TEST_PUBLISH = false
const token = process.env.KACTUSBOT_TOKEN
const repo = 'kactus-io/kactus'

let branchName = ''
if (process.platform === 'darwin') {
  branchName = process.env.TRAVIS_BRANCH
} else if (process.platform === 'win32') {
  branchName = process.env.APPVEYOR_REPO_BRANCH
}

if (!/^__release.*/.test(branchName) && !TEST_PUBLISH) {
  console.log(`${branchName} isn't a release branch. Skipping publish.`)
  process.exit(0)
}

const fs = require('fs')
const cp = require('child_process')
const github = require('./github')
const distInfo = require('./dist-info')
const crypto = require('crypto')
const request = require('request')

console.log('Packaging…')
cp.execSync('npm run package')

let uploadPromise = null
if (process.platform === 'darwin') {
  uploadPromise = uploadOSXAssets
} else if (process.platform === 'win32') {
  uploadPromise = uploadWindowsAssets
} else {
  console.error(`I dunno how to publish a release for ${process.platform} :(`)
  process.exit(1)
}

var releaseId
var tag = 'v' + distInfo.getVersion();

console.log('Uploading ' + tag + '…')

github.getOrCreateDraftRelease(token, repo, tag, branchName, require('../changelog.json')[distInfo.getVersion()] || [])
  .then(function (res) {
    releaseId = res.id
    return uploadPromise(releaseId)
  })
  .then(artifacts => {
    const names = artifacts.map(function(item,index) {
        return item.name;
    })
    console.log(`Uploaded artifacts: ${names}`)
    return github.publishRelease(token, repo, releaseId);
  })
  .catch(e => {
    console.error(`Publishing failed: ${e}`)
    process.exit(1)
  })

function uploadOSXAssets (releaseId) {
  const uploads = [
    github.updateAsset(token, repo, releaseId, distInfo.getOSXZipPath())
  ]
  return Promise.all(uploads)
}

function uploadWindowsAssets (releaseId) {
  const uploads = [
    github.updateAsset(token, repo, releaseId, distInfo.getWindowsInstallerPath()),
    github.updateAsset(token, repo, releaseId, distInfo.getWindowsStandalonePath()),
    github.updateAsset(token, repo, releaseId, distInfo.getWindowsFullNugetPackagePath())
  ]
  return Promise.all(uploads)
}

#!/usr/bin/env node

'use strict'

const TEST_PUBLISH = false
const PUBLISH_CHANNELS = ['production', 'test', 'beta']
const distInfo = require('./dist-info')
const gitInfo = require('../app/git-info')
const packageInfo = require('../app/package-info')

if (PUBLISH_CHANNELS.indexOf(distInfo.getReleaseChannel()) < 0) {
  console.log('Not a publishable build. Skipping publish.')
  process.exit(0)
}

const releaseSHA = distInfo.getReleaseSHA()
if (!releaseSHA) {
  console.log(`No release SHA found for build. Skipping publish.`)
  process.exit(0)
}

const currentTipSHA = gitInfo.getSHA()
if (
  !currentTipSHA ||
  !currentTipSHA.toUpperCase().startsWith(releaseSHA.toUpperCase())
) {
  console.log(
    `Current tip '${currentTipSHA}' does not match release SHA '${releaseSHA}'. Skipping publish.`
  )
  process.exit(0)
}

const fs = require('fs')
const cp = require('child_process')
const github = require('./github')
const crypto = require('crypto')
const request = require('request')

const token = process.env.KACTUSBOT_TOKEN
const repo = 'kactus-io/kactus'

console.log('Packaging…')
cp.execSync('npm run package')

let uploadPromise = null
if (process.platform === 'darwin') {
  uploadPromise = uploadOSXAssets
} else if (process.platform === 'win32') {
  uploadPromise = uploadWindowsAssets
} else {
  console.error(`I dunno how to publish a release for ${process.platform} :(`)
  process.exit(1)
}

let releaseId
const tag = 'v' + distInfo.getVersion()

console.log('Uploading ' + tag + '…')

github
  .getOrCreateDraftRelease(
    token,
    repo,
    tag,
    distInfo.getReleaseBranchName(),
    require('../changelog.json').releases[distInfo.getVersion()] || []
  )
  .then(function(res) {
    releaseId = res.id
    return uploadPromise(releaseId)
  })
  .then(artifacts => {
    const names = artifacts.map(function(item, index) {
      return item.name
    })
    console.log(`Uploaded artifacts: ${names}`)
    return github.publishRelease(token, repo, releaseId)
  })
  .catch(e => {
    console.error(`Publishing failed: ${e}`)
    process.exit(1)
  })

function uploadOSXAssets(releaseId) {
  const uploads = [
    github.updateAsset(token, repo, releaseId, distInfo.getOSXZipPath()),
  ]
  return Promise.all(uploads)
}

function uploadWindowsAssets() {
  const uploads = [
    upload(
      distInfo.getWindowsInstallerName(),
      distInfo.getWindowsInstallerPath()
    ),
    upload(
      distInfo.getWindowsStandaloneName(),
      distInfo.getWindowsStandalonePath()
    ),
    upload(
      distInfo.getWindowsFullNugetPackageName(),
      distInfo.getWindowsFullNugetPackagePath()
    ),
  ]

  if (distInfo.shouldMakeDelta()) {
    uploads.push(
      upload(
        distInfo.getWindowsDeltaNugetPackageName(),
        distInfo.getWindowsDeltaNugetPackagePath()
      )
    )
  }

  return Promise.all(uploads)
}
